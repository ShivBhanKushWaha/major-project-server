// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  mobileNumber String
  password     String
  appointments Appointment[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

model Doctor {
  id                 Int              @id @default(autoincrement())
  name               String
  phone              String           @unique
  email              String           @unique
  specialization     String
  address1           String
  address2           String?
  city               String
  state              String
  zipCode            String
  ugDegree           String
  pgDegree           String?
  instituteNamePg    String
  instituteNameUg    String
  otherQualification String?
  gender             String
  fees               Float
  availability       String[]         // Original availability
  bookedSlote        String[]         // New field for booked slots
  unBookedSlote      String[]         // New field for unbooked slots
  password           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  experience         Int
  appointments       Appointment[]
  patientDetails     PatientDetails[]
}

model PatientDetails {
  id                       Int     @id @default(autoincrement())
  familyMember             String
  age                      Int
  gender                   String
  contactNumber            String
  historyOfMentalIssue     String
  symptoms                 String
  diagnosis                String
  treatment                String
  whichFamilyMember        String
  symptomsOfPatient        String
  whenProblemStart         String
  previousPatientTreatment String
  freqOfSymptoms           String
  triggerPoint             String
  capacityOfWork           String
  sleepProper              Boolean
  timeOfSleepHourly        Int
  eatingProperly           Boolean
  interestedToDoSomething  Boolean
  notInterested            String
  qualityTimeForThemselves Boolean
  noThemselves             Boolean
  doctorId                 Int
  doctor                   Doctor  @relation(fields: [doctorId], references: [id])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  userId    Int
  date      DateTime
  status    String // e.g., "treated", "booked"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([doctorId, userId, date])
}
